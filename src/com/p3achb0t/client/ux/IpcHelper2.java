package com.p3achb0t.client.ux;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.p3achb0t.api.interfaces.ChannelInterface;
import com.p3achb0t.client.communication.ipc.Broker;
import com.p3achb0t.client.communication.ipc.Channel;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;
import java.util.Map;

public class IpcHelper2 extends JFrame {
    private JTree channelsTree;
    private JPanel ipcHelper;
    private JTree tree1;
    private JList list1;
    private JTextField textField1;
    private JButton sendButton;
    private JButton refreshButton;

    private Broker broker;
    private DefaultMutableTreeNode channelsView = new DefaultMutableTreeNode("IPC Channels");
    private DefaultTreeModel treeModel = new DefaultTreeModel(channelsView);


    public IpcHelper2(Broker broker) {
        this.broker = broker;
        channelsTree.addTreeSelectionListener(treeSelectionEvent -> {

            System.out.println(treeSelectionEvent.getPaths()[1]);
            if (treeSelectionEvent.getPaths().length > 1) {
                broker.subscribeChannel(treeSelectionEvent.getPaths()[1].toString(),
                        (String id, ChannelInterface message) -> {
                            return null;
                        }, "IPC Helper",
                        (String id, String message) -> {
                            System.out.println();
                            return null;
                        });


            }

        });


        setTitle("IPC Helper");
        fill();
        channelsTree.setModel(treeModel);
        add(ipcHelper);
        pack();
        setVisible(true);
    }

    private void roomSub(String id, ChannelInterface message) {

    }

    private void fill() {

        for (Map.Entry<String, Channel> channel : broker.getChannels().entrySet()) {
            DefaultMutableTreeNode entry = new DefaultMutableTreeNode(channel.getKey());


            for (var s : channel.getValue().getObservers().entrySet()) {
                entry.add(new DefaultMutableTreeNode(s.getKey()));
            }

            channelsView.add(entry);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        ipcHelper = new JPanel();
        ipcHelper.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        ipcHelper.setMinimumSize(new Dimension(500, 500));
        ipcHelper.setPreferredSize(new Dimension(500, 500));
        final JScrollPane scrollPane1 = new JScrollPane();
        ipcHelper.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tree1 = new JTree();
        scrollPane1.setViewportView(tree1);
        final JScrollPane scrollPane2 = new JScrollPane();
        ipcHelper.add(scrollPane2, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        list1 = new JList();
        scrollPane2.setViewportView(list1);
        textField1 = new JTextField();
        ipcHelper.add(textField1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        sendButton = new JButton();
        sendButton.setText("Send");
        ipcHelper.add(sendButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        refreshButton = new JButton();
        refreshButton.setText("Refresh");
        ipcHelper.add(refreshButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return ipcHelper;
    }

}
